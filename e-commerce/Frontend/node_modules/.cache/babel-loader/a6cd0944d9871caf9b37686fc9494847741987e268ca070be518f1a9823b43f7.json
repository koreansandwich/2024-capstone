{"ast":null,"code":"var _jsxFileName = \"C:\\\\koreansandwich\\\\2024-capstone\\\\e-commerce\\\\Frontend\\\\src\\\\components\\\\ChatbotInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatbotInterface.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotInterface = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]); // 채팅 기록 상태\n  const [message, setMessage] = useState(\"\");\n\n  // 히스토리 로드\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    axios.get(\"http://localhost:8080/api/chat/history\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      } // 백틱 사용\n    }).then(response => {\n      // 히스토리를 상태에 저장\n      setChatHistory(response.data);\n    }).catch(error => {\n      console.error(\"Failed to load chat history:\", error);\n    });\n  }, []); // 빈 배열: 초기 렌더링 시 한 번 실행\n\n  // 메시지 전송\n  const handleSendMessage = () => {\n    const token = localStorage.getItem(\"token\");\n    const newMessage = {\n      text: message,\n      sender: \"user\"\n    };\n    if (!message.trim()) {\n      console.error(\"Cannot send an empty message\");\n      return;\n    }\n\n    // 화면에 사용자 메시지 추가\n    setChatHistory([...chatHistory, newMessage]);\n    axios.post(\"http://localhost:8080/api/chat/send\", newMessage, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      } // 백틱 사용\n    }).then(() => {\n      // 봇 응답 요청\n      return axios.post(\"http://localhost:8080/api/chat/bot-response\", newMessage, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // 백틱 사용\n      });\n    }).then(response => {\n      // 화면에 봇 응답 추가\n      setChatHistory(prevHistory => [...prevHistory, {\n        text: response.data.message,\n        sender: \"bot\"\n      }]);\n    }).catch(error => {\n      console.error(\"Failed to send message:\", error);\n    });\n    setMessage(\"\"); // 입력 필드 초기화\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      children: chatHistory.length > 0 ? chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.sender}` // 백틱 사용\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-chat\",\n        children: \"Your chat will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatbotInterface, \"7k+kaFKzPWLF4jO3FQkYTe+kkoE=\");\n_c = ChatbotInterface;\nexport default ChatbotInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatbotInterface\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ChatbotInterface","_s","chatHistory","setChatHistory","message","setMessage","token","localStorage","getItem","get","headers","Authorization","then","response","data","catch","error","console","handleSendMessage","newMessage","text","sender","trim","post","prevHistory","className","children","length","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/koreansandwich/2024-capstone/e-commerce/Frontend/src/components/ChatbotInterface.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ChatbotInterface.css\";\r\n\r\nconst ChatbotInterface = () => {\r\n    const [chatHistory, setChatHistory] = useState([]); // 채팅 기록 상태\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    // 히스토리 로드\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        axios\r\n            .get(\"http://localhost:8080/api/chat/history\", {\r\n                headers: { Authorization: `Bearer ${token}` }, // 백틱 사용\r\n            })\r\n            .then((response) => {\r\n                // 히스토리를 상태에 저장\r\n                setChatHistory(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Failed to load chat history:\", error);\r\n            });\r\n    }, []); // 빈 배열: 초기 렌더링 시 한 번 실행\r\n\r\n    // 메시지 전송\r\n    const handleSendMessage = () => {\r\n        const token = localStorage.getItem(\"token\");\r\n        const newMessage = { text: message, sender: \"user\" };\r\n\r\n        if (!message.trim()) {\r\n            console.error(\"Cannot send an empty message\");\r\n            return;\r\n        }\r\n\r\n        // 화면에 사용자 메시지 추가\r\n        setChatHistory([...chatHistory, newMessage]);\r\n\r\n        axios\r\n            .post(\"http://localhost:8080/api/chat/send\", newMessage, {\r\n                headers: { Authorization: `Bearer ${token}` }, // 백틱 사용\r\n            })\r\n            .then(() => {\r\n                // 봇 응답 요청\r\n                return axios.post(\"http://localhost:8080/api/chat/bot-response\", newMessage, {\r\n                    headers: { Authorization: `Bearer ${token}` }, // 백틱 사용\r\n                });\r\n            })\r\n            .then((response) => {\r\n                // 화면에 봇 응답 추가\r\n                setChatHistory((prevHistory) => [\r\n                    ...prevHistory,\r\n                    { text: response.data.message, sender: \"bot\" },\r\n                ]);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Failed to send message:\", error);\r\n            });\r\n        setMessage(\"\"); // 입력 필드 초기화\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-area\">\r\n                {chatHistory.length > 0 ? (\r\n                    chatHistory.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`chat-message ${message.sender}`} // 백틱 사용\r\n                        >\r\n                            <p>{message.text}</p>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"empty-chat\">Your chat will appear here...</p>\r\n                )}\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"chat-input\"\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatbotInterface;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CX,KAAK,CACAY,GAAG,CAAC,wCAAwC,EAAE;MAC3CC,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUL,KAAK;MAAG,CAAC,CAAE;IACnD,CAAC,CAAC,CACDM,IAAI,CAAEC,QAAQ,IAAK;MAChB;MACAV,cAAc,CAACU,QAAQ,CAACC,IAAI,CAAC;IACjC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMW,UAAU,GAAG;MAAEC,IAAI,EAAEhB,OAAO;MAAEiB,MAAM,EAAE;IAAO,CAAC;IAEpD,IAAI,CAACjB,OAAO,CAACkB,IAAI,CAAC,CAAC,EAAE;MACjBL,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAC;MAC7C;IACJ;;IAEA;IACAb,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEiB,UAAU,CAAC,CAAC;IAE5CtB,KAAK,CACA0B,IAAI,CAAC,qCAAqC,EAAEJ,UAAU,EAAE;MACrDT,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUL,KAAK;MAAG,CAAC,CAAE;IACnD,CAAC,CAAC,CACDM,IAAI,CAAC,MAAM;MACR;MACA,OAAOf,KAAK,CAAC0B,IAAI,CAAC,6CAA6C,EAAEJ,UAAU,EAAE;QACzET,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAG,CAAC,CAAE;MACnD,CAAC,CAAC;IACN,CAAC,CAAC,CACDM,IAAI,CAAEC,QAAQ,IAAK;MAChB;MACAV,cAAc,CAAEqB,WAAW,IAAK,CAC5B,GAAGA,WAAW,EACd;QAAEJ,IAAI,EAAEP,QAAQ,CAACC,IAAI,CAACV,OAAO;QAAEiB,MAAM,EAAE;MAAM,CAAC,CACjD,CAAC;IACN,CAAC,CAAC,CACDN,KAAK,CAAEC,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD,CAAC,CAAC;IACNX,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACIN,OAAA;IAAK0B,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9B3B,OAAA;MAAK0B,SAAS,EAAC,WAAW;MAAAC,QAAA,EACrBxB,WAAW,CAACyB,MAAM,GAAG,CAAC,GACnBzB,WAAW,CAAC0B,GAAG,CAAC,CAACxB,OAAO,EAAEyB,KAAK,kBAC3B9B,OAAA;QAEI0B,SAAS,EAAE,gBAAgBrB,OAAO,CAACiB,MAAM,EAAG,CAAC;QAAA;QAAAK,QAAA,eAE7C3B,OAAA;UAAA2B,QAAA,EAAItB,OAAO,CAACgB;QAAI;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GAHhBJ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIT,CACR,CAAC,gBAEFlC,OAAA;QAAG0B,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAA6B;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC7D;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACNlC,OAAA;MAAK0B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvB3B,OAAA;QACImC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE/B,OAAQ;QACfgC,QAAQ,EAAGC,CAAC,IAAKhC,UAAU,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAC,mBAAmB;QAC/Bd,SAAS,EAAC;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACFlC,OAAA;QAAQyC,OAAO,EAAEtB,iBAAkB;QAACO,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAE5D;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAChC,EAAA,CAtFID,gBAAgB;AAAAyC,EAAA,GAAhBzC,gBAAgB;AAwFtB,eAAeA,gBAAgB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}