{"ast":null,"code":"var _jsxFileName = \"C:\\\\koreansandwich\\\\2024-capstone\\\\e-commerce\\\\Frontend\\\\src\\\\components\\\\ChatbotInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatbotInterface.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotInterface = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]); // 채팅 기록 상태\n  const [message, setMessage] = useState(\"\");\n  const chatAreaRef = useRef(null); // 스크롤 제어를 위한 Ref\n\n  // 히스토리 로드\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    axios.get(\"http://localhost:8080/api/chat/history\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      setChatHistory(response.data);\n    }).catch(error => {\n      console.error(\"Failed to load chat history:\", error);\n    });\n  }, []);\n\n  // 새로운 메시지가 추가될 때 자동 스크롤\n  useEffect(() => {\n    if (chatAreaRef.current) {\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    }\n  }, [chatHistory]);\n\n  // 메시지 전송\n  const handleSendMessage = () => {\n    const token = localStorage.getItem(\"token\");\n    const newMessage = {\n      text: message,\n      sender: \"user\"\n    };\n    if (!message.trim()) {\n      console.error(\"Cannot send an empty message\");\n      return;\n    }\n    setChatHistory([...chatHistory, newMessage]); // 사용자 메시지 추가\n\n    axios.post(\"http://localhost:8080/api/chat/send\", newMessage, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(() => {\n      return axios.post(\"http://localhost:8080/api/chat/bot-response\", newMessage, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }).then(response => {\n      // 봇 응답 추가\n      setChatHistory(prevHistory => [...prevHistory, {\n        text: response.data.message,\n        sender: \"bot\"\n      }]);\n    }).catch(error => {\n      console.error(\"Failed to send message:\", error);\n    });\n    setMessage(\"\"); // 입력 초기화\n  };\n\n  // 봇 메시지 포맷팅\n  const renderBotMessage = message => {\n    try {\n      // 메시지가 JSON 포맷일 경우 파싱\n      const data = JSON.parse(message.text);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bot-message-card\",\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC548\\uB155\\uD558\\uC138\\uC694! \\uC801\\uC808\\uD55C \\uC81C\\uD488\\uC744 \\uCD94\\uCC9C\\uD574\\uB4DC\\uB9B4\\uAC8C\\uC694 :)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.item_image_url,\n            alt: item.item_name,\n            className: \"product-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item.item_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uAC00\\uACA9:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 32\n            }, this), \" \", item.item_final_price, \"\\uC6D0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uBE0C\\uB79C\\uB4DC:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 32\n            }, this), \" \", item.brand]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"\\uB9C1\\uD06C:\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: data.item_link,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"link\",\n              children: \"[\\uD074\\uB9AD\\uD558\\uC138\\uC694]\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this);\n    } catch (e) {\n      // 텍스트 메시지일 경우 줄바꿈 처리 추가\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message.text.split(\"\\n\").map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this) // 줄바꿈 처리\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: chatHistory.length > 0 ? chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.sender}`,\n        children: message.sender === \"bot\" ? renderBotMessage(message) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 35\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-chat\",\n        children: \"Your chat will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatbotInterface, \"ZsPKItN/0iFZZTxWXAy/Wxw04v8=\");\n_c = ChatbotInterface;\nexport default ChatbotInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatbotInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatbotInterface","_s","chatHistory","setChatHistory","message","setMessage","chatAreaRef","token","localStorage","getItem","get","headers","Authorization","then","response","data","catch","error","console","current","scrollTop","scrollHeight","handleSendMessage","newMessage","text","sender","trim","post","prevHistory","renderBotMessage","JSON","parse","className","children","map","item","index","fileName","_jsxFileName","lineNumber","columnNumber","src","item_image_url","alt","item_name","item_final_price","brand","href","item_link","target","rel","e","split","line","ref","length","type","value","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/koreansandwich/2024-capstone/e-commerce/Frontend/src/components/ChatbotInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ChatbotInterface.css\";\r\n\r\nconst ChatbotInterface = () => {\r\n    const [chatHistory, setChatHistory] = useState([]); // 채팅 기록 상태\r\n    const [message, setMessage] = useState(\"\");\r\n    const chatAreaRef = useRef(null); // 스크롤 제어를 위한 Ref\r\n\r\n    // 히스토리 로드\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        axios\r\n            .get(\"http://localhost:8080/api/chat/history\", {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n                setChatHistory(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Failed to load chat history:\", error);\r\n            });\r\n    }, []);\r\n\r\n    // 새로운 메시지가 추가될 때 자동 스크롤\r\n    useEffect(() => {\r\n        if (chatAreaRef.current) {\r\n            chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n        }\r\n    }, [chatHistory]);\r\n\r\n    // 메시지 전송\r\n    const handleSendMessage = () => {\r\n        const token = localStorage.getItem(\"token\");\r\n        const newMessage = { text: message, sender: \"user\" };\r\n\r\n        if (!message.trim()) {\r\n            console.error(\"Cannot send an empty message\");\r\n            return;\r\n        }\r\n\r\n        setChatHistory([...chatHistory, newMessage]); // 사용자 메시지 추가\r\n\r\n        axios\r\n            .post(\"http://localhost:8080/api/chat/send\", newMessage, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then(() => {\r\n                return axios.post(\"http://localhost:8080/api/chat/bot-response\", newMessage, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n            })\r\n            .then((response) => {\r\n                // 봇 응답 추가\r\n                setChatHistory((prevHistory) => [\r\n                    ...prevHistory,\r\n                    { text: response.data.message, sender: \"bot\" },\r\n                ]);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Failed to send message:\", error);\r\n            });\r\n\r\n        setMessage(\"\"); // 입력 초기화\r\n    };\r\n\r\n    // 봇 메시지 포맷팅\r\n    const renderBotMessage = (message) => {\r\n        try {\r\n            // 메시지가 JSON 포맷일 경우 파싱\r\n            const data = JSON.parse(message.text);\r\n\r\n            return (\r\n                <div className=\"bot-message-card\">\r\n                    {data.map((item, index) => (\r\n                        <div key={index}>\r\n                            <p>안녕하세요! 적절한 제품을 추천해드릴게요 :)</p>\r\n                            <img src={item.item_image_url} alt={item.item_name} className=\"product-image\"/>\r\n                            <h3>{item.item_name}</h3>\r\n                            <p><strong>가격:</strong> {item.item_final_price}원</p>\r\n                            <p><strong>브랜드:</strong> {item.brand}</p>\r\n                            <p>\r\n                                <strong>링크:{\" \"}</strong>\r\n                                <a href={data.item_link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"link\">\r\n                                    [클릭하세요]\r\n                                </a>\r\n                            </p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            // 텍스트 메시지일 경우 줄바꿈 처리 추가\r\n            return (\r\n                <div>\r\n                    {message.text.split(\"\\n\").map((line, index) => (\r\n                        <p key={index}>{line}</p> // 줄바꿈 처리\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                {chatHistory.length > 0 ? (\r\n                    chatHistory.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`chat-message ${message.sender}`}\r\n                        >\r\n                            {message.sender === \"bot\"\r\n                                ? renderBotMessage(message)\r\n                                : <p>{message.text}</p>}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"empty-chat\">Your chat will appear here...</p>\r\n                )}\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"chat-input\"\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatbotInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}